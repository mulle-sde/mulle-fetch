#! /bin/sh
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_FETCH_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

####
#
# Prelude to be placed at top of each script. Rerun this script either in
# bash or zsh, if not already running in either (which can happen!)
# Allows script to run on systems that either have bash (linux) or
# zsh (macOS) only by default.

if [ "$1" != --no-auto-shell ]
then
   if [ -z "${BASH_VERSION}" -a -z "${ZSH_VERSION}" ]
   then
      exe_shell="`command -v "bash" `"
      exe_shell="${exe_shell:-`command -v "zsh" `}"

      script="$0"

      #
      # Quote incoming arguments for shell expansion
      #
      args=""
      for arg in "$@"
      do
         # True bourne sh doesn't know ${a//b/c} and <<<
         case "${arg}" in
            *\'*)
               # Use cat instead of echo to avoid possible echo -n
               # problems. Escape single quotes in string.
               arg="`cat <<EOF | sed -e s/\'/\'\\\"\'\\\"\'/g
${arg}
EOF
`"
            ;;
         esac
         if [ -z "${args}" ]
         then
            args="'${arg}'"
         else
            args="${args} '${arg}'"
         fi
      done

      #
      # bash/zsh will use arg after -c <arg> as $0, convenient!
      #

      exec "${exe_shell:-bash}" -c ". ${script} --no-auto-shell ${args}" "${script}"
   fi
   if [ ! -z "${BASH_VERSION}" ]
   then
      set +o posix
   fi
else
   shift    # get rid of --no-auto-shell
fi


#
# Main script to follow, runs now either in zsh or bash
#
####

MULLE_EXECUTABLE_VERSION="2.0.0"

#
# This is the main user interface to mulle-fetch
# sorta like git
#
print_commands()
{
   local  show_all="${1:-NO}"

   SHOWN_COMMANDS="\
   domain      : special commands to query remote tags
   cfetch      : conveniently fetch and unpack URL by guessing a lot (default)
   fetch       : explicitly fetch archive or repository into a directory
   update      : update repository (-> git fetch)
   upgrade     : upgrade repository (-> git pull)"


   HIDDEN_COMMANDS="\
   allow       : allow this directory being symlinked by projects (default)
   exists      : check if url is accessible (returns 0=YES)
   libexec-dir : print path to mulle-fetch libexec
   operation   : list operations available (for mulle-sourcetree)
   list        : list plugins available
   prevent     : prevent this directory from being symlinked by other projects
   uname       : mulle-fetchs simplified uname(1)
   version     : print mulle-fetch version"


   printf "%s\n" "${SHOWN_COMMANDS}"

   if [ "${show_all}" != 'NO' ]
   then
      printf "%s\n" "${HIDDEN_COMMANDS}"
   fi
}


print_flags()
{
   echo "   -f          : force operation"
   echo "   --recursive : recursive fetch (git only)"

   options_technical_flags_usage "       : "
}


_usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] <command>

   Retrieve and unpack tar archive, git repositories, svn repositories.
   For complete control use the explicit fetch command. For quick and dirty
   fetches use the cfetch command or the shortcut without any command:

   Example:
      mulle-fetch https://github.com/mulle-core/mulle-mmap/archive/0.0.1.zip

Flags:
EOF
   print_flags  | LC_ALL=C sort


   cat <<EOF

Commands:
EOF

   print_commands "${verbose}" | LC_ALL=C sort


   cat <<EOF

      (Options are command specific. Use mulle-fetch <command> -h for help.)
EOF

   cat <<EOF

Environment:
   MULLE_FETCH_ARCHIVE_DIR : local cache of archives
   MULLE_FETCH_MIRROR_DIR  : local mirror of git repositories
   MULLE_FETCH_SEARCH_PATH : specify local directories to search, : separated

EOF

   if [ "${verbose}" = 'NO' ]
   then
      cat <<EOF
      (use ${MULLE_USAGE_NAME} -v help to show more commands)
EOF
   fi
}


usage()
{
   _usage "$@" >&2
   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local GIT_FETCH_FLAGS

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         --github|--github-user)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            OPTION_GITHUB_USER="$1"
         ;;

         --git-terminal-prompt)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            GIT_TERMINAL_PROMPT="$1"
            export GIT_TERMINAL_PROMPT
         ;;

         --recursive)
            GIT_FETCH_FLAGS="$1"  # for git
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            log_error "Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   local cmd="$1"
   [ $# -eq 0 ] || shift

   case "${cmd}" in
      ""|help)
         usage
      ;;

      allow)
         if [ -f ".mulle/etc/fetch/no-symlink" -o -f ".mulle/etc/fetch/no-search" ]
         then
            log_info "${PWD} is local-searchable and can be symlinked again"
            remove_file_if_present ".mulle/etc/fetch/no-search"
            rmdir_if_empty .mulle/etc/fetch
            rmdir_if_empty .mulle/etc
            rmdir_if_empty .mulle
         else
            log_verbose "${PWD} is already local-searchable and symlinkable"
         fi
      ;;

      checkout)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_checkout_main "$@"
      ;;

      exists)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_exists_main "$@"
      ;;

      cfetch|convenient-fetch)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_convenient_fetch_main "$@"
      ;;

      fetch)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_fetch_main "$@"
      ;;

      "libexec-dir"|"library-path")
         printf "%s\n" "${MULLE_FETCH_LIBEXEC_DIR}"
      ;;

      list)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-plugin.sh"

         fetch_plugin_main "$@" list
      ;;

      operation)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-operation.sh"

         fetch_operation_main "$@"
      ;;

      plugin)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-plugin.sh"

         fetch_plugin_main "$@"
      ;;

      prevent)
         if [ ! -f ".mulle/etc/fetch/no-symlink" -o ! -f ".mulle/etc/fetch/no-search" ]
         then
            log_info "${PWD} will not be local-searched or symlinked anymore"
            mkdir_if_missing .mulle/etc/fetch
            redirect_exekutor ".mulle/etc/fetch/no-symlink" echo "# existence of file is enough"
            redirect_exekutor ".mulle/etc/fetch/no-search" echo "# existence of file is enough"
         else
            log_verbose "${PWD} is already not local-searchable and symlinkable"
         fi
      ;;

      search-local)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_search_local_main "$@"
      ;;

      set-url)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_set_url_main "$@"
      ;;

      status)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_status_main "$@"
      ;;

      uname)
         printf "%s\n" "${MULLE_UNAME}"
      ;;

      update)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_update_main "$@"
      ;;

      upgrade)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_upgrade_main "$@"
      ;;

      version)
         printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      # cheap shortcut to avoid typing fetch
      *:*)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_convenient_fetch_main "${cmd}"
      ;;

      *)
         # shellcheck source=src/mulle-fetch-commands.sh
         if [ -e "${cmd}" ]
         then
            . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

            fetch_fetch_main --symlink "${cmd}"
            return $?
         fi

         usage "Unknown command ${cmd}"
      ;;
   esac
}


########
###
### INIT
###
_fatal()
{
   echo "$0 fatal error: $*" >&2
   exit 1
}

_init()
{
   #
   # leading backslash ? looks like we're getting called from
   # mingw via a .BAT or so
   #
   case "$PATH" in
      '\\'*)
         PATH="${PATH//\\/\/}"
      ;;
   esac

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
            _fatal "mulle-bashfunctions-env not installed"
         fi
         _fatal "Could not find libexec of mulle-bashfunctions-env"
      fi
   fi

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" &&

   if [ -z "${MULLE_FETCH_LIBEXEC_DIR}" ]
   then
      r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-fetch" "mulle-fetch-git.sh"
      MULLE_FETCH_LIBEXEC_DIR="${RVAL}"
   fi

   #
   # commands with minimal trap setup
   #
   if [ $# -eq 1 ]
   then
      case "${1}" in
         libexec-dir|library-path)
            printf "%s\n" "${MULLE_FETCH_LIBEXEC_DIR}"
            exit 0
         ;;

         version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;
      esac
   fi
   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   shell_enable_pipefail
   shell_enable_extglob

   call_main "${MULLE_FETCH_FLAGS}" "$@"
}
###
### INIT
###
########


MULLE_EXECUTABLE="${MULLE_EXECUTABLE:-${BASH_SOURCE[0]:-${(%):-%x}}}"

_init "$@" # needs params

