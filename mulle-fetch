#! /usr/bin/env bash
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
if [ "${TRACE}" = "YES" ]
then
   set -x
fi

MULLE_EXECUTABLE_VERSION="1.3.7"


MULLE_EXECUTABLE_BASHFUNCTIONS="1.3"


#
# This is the main user interface to mulle-fetch
# sorta like git
#

trap_fail()
{
   exit 1
}


print_commands()
{
   local  show_all="${1:-NO}"

   SHOWN_COMMANDS="\
   fetch         : fetch archive or repository [default]
   update        : update repository (-> git fetch)
   upgrade       : upgrade repository (-> git pull)"


   HIDDEN_COMMANDS="\
   nameguess     : guess final filename from url, (hint: specify -s <scm>)
   libexec-dir   : print path to mulle-fetch libexec
   operation     : list operations available (for mulle-sourcetree)
   plugin        : list plugins available
   tag           : tag repository
   typeguess     : guess plugin name suitable for url
   uname         : mulle-fetchs simplified uname(1)
   version       : print mulle-fetch version"


   echo "${SHOWN_COMMANDS}"

   if [ "${show_all}" != "NO" ]
   then
      echo "${HIDDEN_COMMANDS}"
   fi
}

print_flags()
{
   echo "   -f    : force operation"

   options_technical_flags_usage
}


_usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] <command>

   Retrieve and unpack tar archive, git repositories, svn repositories.

Flags:
EOF
   print_flags  | sort


   cat <<EOF

Commands:
EOF

   print_commands "${verbose}" | sort

   if [ "${verbose}" = "NO" ]
   then
      cat <<EOF
      (use mulle-fetch -v help to show more commands)
EOF
   fi

   cat <<EOF

   Options are command specific. Use mulle-fetch <command> -h for help.
EOF

   exit 1
}


usage()
{
   _usage "$@" >&2
   exit 1
}




main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NONE"

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="BOTH"
         ;;

         -h*|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         --git-terminal-prompt)
            [ $# -eq 1 ] && fail "missing argument to \"$1\""
            shift

            GIT_TERMINAL_PROMPT="$1"
            export GIT_TERMINAL_PROMPT
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            log_error "Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local cmd="$1"
   [ $# -eq 0 ] || shift

   case "${cmd}" in
      checkout)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_checkout_main "$@"
      ;;

      # for the user it's a fetch, but internally we call it
      # a clone for historical reasons, and also fetch_fetch is
      # stupid
      fetch)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_clone_main "$@"
      ;;

      nameguess|guess)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_guess_main "$@"
      ;;

      "libexec-dir"|"library-path")
         echo "${MULLE_FETCH_LIBEXEC_DIR}"
      ;;

      operation)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-operation.sh"

         fetch_operation_main "$@"
      ;;

      plugin)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-plugin.sh"

         fetch_plugin_main "$@"
      ;;

      search-local)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_search_local_main "$@"
      ;;

      set-url)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_set_url_main "$@"
      ;;

      status)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_status_main "$@"
      ;;

      typeguess)
         # shellcheck source=src/mulle-fetch-url.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-url.sh"

         fetch_typeguess_main "$@"
      ;;

      uname)
         echo "${MULLE_UNAME}"
      ;;

      update)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_update_main "$@"
      ;;

      upgrade)
         # shellcheck source=src/mulle-fetch-commands.sh
         . "${MULLE_FETCH_LIBEXEC_DIR}/mulle-fetch-commands.sh"

         fetch_upgrade_main "$@"
      ;;

      version)
         echo "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         log_error "Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac
}


########
###
### INIT
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
             echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH (not installed ?)" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" ||
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   local _libexec_dir

   _get_libexec_dir "$0" "mulle-fetch" "mulle-fetch-git.sh"

   MULLE_FETCH_LIBEXEC_DIR="${_libexec_dir}"

   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir"|"library-path")
         echo "${MULLE_FETCH_LIBEXEC_DIR}"
         exit 0
      ;;
   esac

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail
}
###
### INIT
###
########


_init "$@" # needs params
main "$@"
