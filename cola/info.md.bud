### Search for best matching URL

For github archives and repositories you can search for the best fitting
release archive with a special "tag filter" syntax, that expresses version
ranges. For this to work the releases must be tagged in [semantic versioning]
style.

For example '>= 1.0.0 AND < 2.0.0' would get you the latest version 1. A tag
filter is of the form

| Filter                      | Description
|-----------------------------|-------------------
| 'newest:' &lt;qualifier&gt; | Use the newest compatible version
| 'oldest:' &lt;qualifier&gt; | Use the oldest compatible version
| &lt;qualifier&gt;           | same as `newest:`, just shorter


| Qualifier                 | Description
|---------------------------|-----------------------
| &lt;unary qualifier&gt;   | These qualifiers compare the github version with your value
| &lt;binary qualifier&gt;  | Boolean logic AND and OR
| `(` &lt;qualifier&gt; `)` | As there is no precedence, use parentheses to express it


| Unary Qualifier      | Example
|----------------------|-------------
| `>=` &lt;version&gt; | `>= 1.0.0`  of [ 0.0.0, 1.0.0, 2.0.0 ] gives 2.0.0
| `<=` &lt;version&gt; | `<= 1.0.0`  of [ 0.0.0, 1.0.0, 2.0.0 ] gives 1.0.0
| `<`  &lt;version&gt; | `< 1.0.0`   of [ 0.0.0, 1.0.0, 2.0.0 ] gives 0.0.0
| `>`  &lt;version&gt; | `> 1.0.0`   of [ 0.0.0, 1.0.0, 2.0.0 ] gives 2.0.0
| `!=` &lt;version&gt; | `!= 1.0.0`  of [ 0.0.0, 1.0.0, 2.0.0 ] gives 2.0.0
| `==`  &lt;version&gt;| `== 1.0.0`  of [ 0.0.0, 1.0.0, 2.0.0 ] gives 1.0.0
| &lt;version&gt;      | same as `==`


| Binary Qualifier                          | Example
|-------------------------------------------|-----------------
| &lt;qualifier&gt; `AND` &lt;qualifier&gt; | `>= 1.0.0 AND < 2.0.0`  of [ 0.0.0, 1.0.0, 2.0.0 ] gives 1.0.0
| &lt;qualifier&gt; `OR` &lt;qualifier&gt;  | `>= 1.0.0 OR == 0.0.0` of [ 0.0.0, 1.0.0, 2.0.0 ] gives 0.0.0


| Version                  | Description
|--------------------------|-------------------------------------------
| [0-9]+'.'[0-9]+'.'[0-9]+ | A version is a semantic versioning triple


### Examples

Use version 3.2.x or better up to but not including version 3.3:

``` sh
mulle-fetch url \
      --scm tar \
   '>= 3.2.0 AND < 3.3.0' \
   https://github.com/mulle-c/mulle-c11
```

Use version 1 or better up, but skip known problem versions 1.0.2 and 1.0.3


``` sh
mulle-fetch url \
      --scm zip \
   '>= 1.0.0 AND != 1.0.2 AND != 1.0.3' \
   https://github.com/mulle-c/mulle-allocator
```


